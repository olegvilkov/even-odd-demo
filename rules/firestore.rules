rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {

      function db() {
        return /databases/$(database)/documents
      }

      function isSignedIn() {
        return request.auth != null;
      }

      function checkAffectedFields(allowFields) {
        let reqData = request.resource.data;

        return resource == null ?
          reqData.keys().hasOnly(allowFields)
          :
          reqData.diff(resource.data).affectedKeys().hasOnly(allowFields);
      }

      // let t = debug("* DEBUG *");
      // let tt = debug(exists(gameDoc));

      match /{document=**} {
        allow read, write: if false;
      }
  
      // A write rule can be divided into create, update, and delete rules
      match /games/{game} {
        allow update: if canUpdateGame();
        allow read: if true;
        allow create: if canCreateGame();

        function canCreateGame () {
          let uid = request.auth.uid;
          let allowFields = ["name", "playersForStart", "order"];
          let player = getAfter(/$(db())/games/$(game)/players/$(uid));

          return
            isSignedIn()
            && isPlayerAdded()
            && checkAffectedFields(allowFields)
            && request.resource.data.name != ''
            && request.resource.data.playersForStart >= 2
            && request.resource.data.order.hasOnly([uid])
            && player.id == uid
        }

        function canUpdateGame () {
          return 
            isSignedIn()
            && isJoinGame()
        }

        function isPlayerAdded () {
          let uid = request.auth.uid;
          let gameDoc = /$(db())/games/$(game)/players/$(uid);
          
          return !exists(gameDoc) && getAfter(gameDoc).id == uid;
        }

        function isJoinGame () {
          let uid = request.auth.uid;
          let allowFields = ["order"];
          let orderBefore = resource.data.order;
          let orderAfter = request.resource.data.order;

          return
            isPlayerAdded()
            && checkAffectedFields(allowFields)
            && orderBefore.concat([uid]) == orderAfter
            && !orderBefore.hasAll([uid])
        }
      }
      
      // A write rule can be divided into create, update, and delete rules
      match /games/{game}/players/{player} {
        allow update: if true;
        allow read: if true;
        allow create: if canCreatePlayer();

        function canCreatePlayer () {
          let uid = request.auth.uid;
          let allowFields = ["name", "points"];

          return
            isSignedIn()
            && request.resource.id == uid
            && request.resource.data.points == 0
            && request.resource.data.name != ''
            && checkAffectedFields(allowFields)
        }
      }
      
    }
}