rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {

      function db() {
        return /databases/$(database)/documents
      }

      function isSignedIn() {
        return request.auth != null;
      }

      // function isFieldsAllow(allowFields) {
      //   let temp = debug("** affectedKeys **");
      //   let affectedKeys = debug(request.resource.data.diff(resource.data).affectedKeys());
      //   let temp2 = debug("** allowFields **");
      //   return affectedKeys.hasOnly(debug(allowFields));
      // }

      function isCreateFieldsAllow(allowFields) {
        return request.resource.data.keys().hasOnly(allowFields);
      }

      match /{document=**} {
        allow read, write: if false;
      }
  
      // A write rule can be divided into create, update, and delete rules
      match /games/{game} {
        allow update: if true;
        allow read: if true;
        allow create: if canCreateGame();

        function canCreateGame () {
          let uid = request.auth.uid;
          let allowFields = ["name", "playersForStart", "order"];
          let player = getAfter(/$(db())/games/$(game)/players/$(uid));

          return
            isSignedIn()
            && isCreateFieldsAllow(allowFields)
            && request.resource.data.name != ''
            && request.resource.data.playersForStart >= 2
            && request.resource.data.order.hasOnly([uid])
            && player.id == uid
        }
      }
      
      // A write rule can be divided into create, update, and delete rules
      match /games/{game}/players/{player} {
        allow update: if true;
        allow read: if true;
        allow create: if canCreatePlayer();

        function canCreatePlayer () {
          let uid = request.auth.uid;
          let allowFields = ["name", "points"];
          let gameDoc = /$(db())/games/$(game);
          let gameBefore = get(gameDoc);
          let gameAfter = getAfter(gameDoc);
          let gameExists = exists(gameDoc);
          let orderBefore = gameBefore.data.order;
          let orderAfter = gameAfter.data.order;
          let allowAffectGameFields = ["order"];

          // let t = debug("* DEBUG *");
          // let tt = debug(exists(gameDoc));

          return
            isSignedIn()
            && request.resource.id == uid
            && request.resource.data.points == 0
            && request.resource.data.name != ''
            && isCreateFieldsAllow(allowFields)
            && (!gameExists || orderBefore.concat([uid]) == orderAfter)
            && (!gameExists || !orderBefore.hasAll([uid]))
            && (!gameExists || gameAfter.data.diff(gameBefore.data).affectedKeys().hasOnly(allowAffectGameFields))
        }
      }
      
    }
}