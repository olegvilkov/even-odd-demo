rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {

      function db() {
        return /databases/$(database)/documents
      }

      function isSignedIn() {
        return request.auth != null;
      }

      // function isFieldsAllow(allowFields) {
      //   let temp = debug("** affectedKeys **");
      //   let affectedKeys = debug(request.resource.data.diff(resource.data).affectedKeys());
      //   let temp2 = debug("** allowFields **");
      //   return affectedKeys.hasOnly(debug(allowFields));
      // }

      function isCreateFieldsAllow(allowFields) {
        return request.resource.data.keys().hasOnly(allowFields);
      }

      match /{document=**} {
        allow read, write: if false;
      }
  
      // A write rule can be divided into create, update, and delete rules
      match /games/{game} {
        allow update: if true;
        allow read: if true;
        allow create: if canCreateGame();

        function canCreateGame () {
          let uid = request.auth.uid;
          let allowFields = ["name", "playersForStart", "order"];
          let player = getAfter(/$(db())/games/$(game)/players/$(uid));

          return
            isSignedIn()
            && isCreateFieldsAllow(allowFields)
            && request.resource.data.name != ''
            && request.resource.data.playersForStart >= 2
            && request.resource.data.order.hasOnly([uid])
            && player.id == uid
        }
      }
      
      // A write rule can be divided into create, update, and delete rules
      match /games/{game}/players/{player} {
        allow update: if true;
        allow read: if true;
        allow create: if true;
      }
      
      // function canCreatePlayer () {
      // 	// let gameAfter = getAfter(/games/$(game));
      // 	return
      //   	// name must be not empty
      //   	request.resource.data.name != ''
      //     // test
      //     // && gameAfter.playersCount > 0
      //     // && request.resource.data.value == resource.data.value +1;
      // }

      // If you update a city doc, you must also
      // update the related country's last_updated field.
      // match /cities/{city} {
      //   allow write: if request.auth != null &&
      //     getAfter(
      //       /databases/$(database)/documents/countries/$(request.resource.data.country)
      //     ).data.last_updated == request.time;
      // }
      
      // function canUpdatePlayer (game, player) {}
      
      // let gameAfter = getAfter(/databases/$(database)/documents/games/$(game));
      
    }
}