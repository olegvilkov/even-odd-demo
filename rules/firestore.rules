rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {

      function db() {
        return /databases/$(database)/documents
      }

      function isSignedIn() {
        return request.auth != null;
      }
      function checkAffectedFields(allowFields) {
        let reqData = request.resource.data;

        return resource == null ?
          reqData.keys().hasOnly(allowFields)
          :
          reqData.diff(resource.data).affectedKeys().hasOnly(allowFields);
      }

      match /{document=**} {
        allow read, write: if false;
      }
  
// game -----------------------------------------
      match /games/{game} {
        allow update: if canUpdateGame();
        allow read: if true;
        allow create: if canCreateGame();

        function canCreateGame () {
          let uid = request.auth.uid;
          let allowFields = ["name", "playersForStart", "order", "turns"];
          let player = getAfter(/$(db())/games/$(game)/players/$(uid));

          return
            isSignedIn()
            && isPlayerAdded()
            && checkAffectedFields(allowFields)
            && request.resource.data.name != ''
            && request.resource.data.playersForStart >= 2
            && request.resource.data.order.toSet() == [uid].toSet()
            && player.id == uid
        }

        function canUpdateGame () {
          return 
            isSignedIn()
            && (isJoinGame() || isAnswerNumber())
        }

        function isAnswerNumber () {
          let allowFields = ["order", "turns", "winner", "leader"];

          return
            checkAffectedFields(allowFields)
            && isAnswerWriteNumber(game)
            && isOrderChangedToNext()
            && isTurnsDecreasedByOne()
            && canUpdateWinner()
            && canUpdateLeader()
        }

        function isOrderChangedToNext() {
          let uid = request.auth.uid;
          let prevOrder = resource.data.order;
          let nextOrder = request.resource.data.order;
          
          return prevOrder.removeAll([uid]).concat([uid]).toSet() == nextOrder.toSet();
        }

        function isTurnsDecreasedByOne() {
          let prevTurns = resource.data.turns;
          let nextTurns = request.resource.data.turns;
          
          return nextTurns == prevTurns - 1;
        }

        function isPlayerAdded () {
          let uid = request.auth.uid;
          let gameDoc = /$(db())/games/$(game)/players/$(uid);

          return !exists(gameDoc) && getAfter(gameDoc).id == uid;
        }

        function isJoinGame() {
          let uid = request.auth.uid;
          let allowFields = ["order"];
          let orderBefore = resource.data.order;
          let orderAfter = request.resource.data.order;

          return
            isPlayerAdded()
            && checkAffectedFields(allowFields)
            && orderBefore.concat([uid]) == orderAfter
            && !orderBefore.hasAll([uid])
        }

        function canUpdateWinner() {
          return !("winner" in resource.data) && (
            !("winner" in request.resource.data) || (
              isGameEnd()
              && isUserLeader()
            )
          )
        }

        function isGameEnd() {
          return request.resource.data.turns <= 0;
        }

        function isUserLeader() {
          return request.resource.data.leader == request.auth.uid;
        }

        function canUpdateLeader() {
          return
            !("leader" in resource.data)
            || request.resource.data.leader == resource.data.leader
            || (
              isUserLeader() && prevLeaderPoints() < curLeaderPoints()
            )
        }

        function curLeaderPoints() {
          let leader = request.resource.data.leader;
          return getAfter(/$(db())/games/$(game)/players/$(leader)).data.points;
        }

        function prevLeaderPoints() {
          let prevLeader = ("leader" in resource.data) ? resource.data.leader : "";
          let prevLeaderPoints = prevLeader != "" ? get(/$(db())/games/$(game)/players/$(prevLeader)).data.points : 0;

          return prevLeaderPoints;
        }
        
      }
      
// player --------------------------------------
      match /games/{game}/players/{player} {
        allow update: if canUpdatePlayer();
        allow read: if true;
        allow create: if canCreatePlayer();

        function canCreatePlayer () {
          let uid = request.auth.uid;
          let allowFields = ["name", "points"];

          return
            isSignedIn()
            && request.resource.id == uid
            && request.resource.data.points == 0
            && request.resource.data.name != ''
            && checkAffectedFields(allowFields)
        }

        function canUpdatePlayer() {
          return
            isSignedIn()
            && canUpPoints()
        }

        function canUpPoints() {
          let allowFields = ["points"];

          return
            checkAffectedFields(allowFields)
            && request.resource.data.points == (resource.data.points + 1)
            && isAnswerWriteNumber(game)
            && isAnswerCorrect()
        }

        function isAnswerCorrect() {
          let answer = get(/$(db())/gameanswer/$(game)).data;

          return
            (answer.number % 2 == 1 && answer.evenodd == Odd())
            || (answer.number % 2 == 0 && answer.evenodd == Even())
        }

      }

// gameanswer ------------------
      match /gameanswer/{game} {
        allow write: if canWriteGameAnswer();
        allow read: if canReadGameAnswer();

        function canWriteGameAnswer() {
          return
            isSignedIn()
            && isUserTurn()
            && (isEvenOddWrite() || isNumberWrite() )
        }

        function isUserTurn () {
          return get(/$(db())/games/$(game)).data.order[0] == request.auth.uid;
        }

        function isNumberWrite() {
          let allowFields = ["number", "mode"];

          return
              resource.data.mode == WaitForNumber()
              && checkAffectedFields(allowFields)
              && request.resource.data.mode == WaitForEvenOdd()
        }

        function isEvenOddWrite() {
            let allowFields = ["evenodd", "mode"];

            return
              (
                resource == null
                || resource.data.mode == WaitForEvenOdd()
              )
              && checkAffectedFields(allowFields)
              && request.resource.data.mode == WaitForNumber()
        }

        function canReadGameAnswer() {
          return resource.data.mode == WaitForNumber();
        }
      }

      function isAnswerWriteNumber(game) {
        let answerDoc = /$(db())/gameanswer/$(game);
        let modeBefore = get(answerDoc).data.mode;
        let modeAfter = getAfter(answerDoc).data.mode;

        return (
            modeBefore == WaitForNumber()
            && modeAfter == WaitForEvenOdd()
          )
      }

      function WaitForEvenOdd() {
        return 0;
      }

      function WaitForNumber() {
          return 1;
      }

      function Odd() {
        return 1;
      }

      function Even() {
        return 0;
      }
      
    }
}